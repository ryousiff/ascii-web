package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

// CharConvert takes an array of ASCII art characters, a Unicode character, and a line number as arguments.
// It converts the Unicode character to an ASCII code, calculates the index of the corresponding ASCII art character in the array, and returns that character.
func CharConvert(arr []string, char rune, line int) string {
	// Calculate the ASCII code of the Unicode character
	Ascii := (int(char)-32)*9 + line
	// Loop through the array of ASCII art characters and find the corresponding character at the calculated index
	for count, _ := range arr {
		if count == Ascii {
			count++
			return arr[count]
		}
	}
	// Return an empty string if the character is not found
	return ""
}
func handleASCII(w http.ResponseWriter, r *http.Request) string {
	// Retrieve the input string frosm the request
	input := r.FormValue("fname")
	//Retrieve the selected banner option from the request
	bannerOption := r.FormValue("banner")

	var banner string
	switch bannerOption {
	case "shadow":
		banner = "shadow"
	case "thinkertoy":
		banner = "thinkertoy"
	case "standard":
		banner = "standard"
	}
	// } else {
	// 	banner = "standard"
	// }

	// Read the banner file
	bannerFilePath := fmt.Sprintf("%s.txt", banner)
	bannerContent, err := ioutil.ReadFile(bannerFilePath)
	if err != nil {
		// Return an error message if the banner file cannot be read
		http.Error(w, "Failed to read banner file", http.StatusInternalServerError)
		return ""
	}

	// Split the banner into lines
	splitLines := strings.Split(string(bannerContent), "\n")
	// Split the input string into lines using the "\n" escape sequence
	input = strings.ReplaceAll(input, "\r\n", "\\n")
	lines := strings.Split(input, `\n`)
	// Get the number of lines in the input string
	numLines := len(lines)

	// Create a strings.Builder to store the output
	var output strings.Builder

	// Loop through each line of the input string and each row of the banner
	for i, line := range lines {
		if len(line) == 0 {
			// Print a newline if the input line is empty
			fmt.Fprintln(&output)
		} else {
			for j := 0; j < 8; j++ {
				// Convert each character of the input line to the corresponding ASCII art character in the banner
				for _, letter := range line {
					fmt.Fprint(&output, CharConvert(splitLines, rune(letter), j))
				}
				// Print a newline if this is not the last line of the input string or the last row of the banner
				if i < numLines-1 || j < 8 {
					fmt.Fprintln(&output)
				}
			}
		}
	}
	return output.String()
}
